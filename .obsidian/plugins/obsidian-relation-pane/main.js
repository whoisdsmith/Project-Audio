/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => RelationPanePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/view.tsx
var import_obsidian = require("obsidian");

// node_modules/svelte/internal/index.mjs
function noop() {
}
function run(fn) {
  return fn();
}
function blank_object() {
  return /* @__PURE__ */ Object.create(null);
}
function run_all(fns) {
  fns.forEach(run);
}
function is_function(thing) {
  return typeof thing === "function";
}
function safe_not_equal(a, b) {
  return a != a ? b == b : a !== b || (a && typeof a === "object" || typeof a === "function");
}
function is_empty(obj) {
  return Object.keys(obj).length === 0;
}
function subscribe(store2, ...callbacks) {
  if (store2 == null) {
    return noop;
  }
  const unsub = store2.subscribe(...callbacks);
  return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
}
function component_subscribe(component, store2, callback) {
  component.$$.on_destroy.push(subscribe(store2, callback));
}
var is_hydrating = false;
function start_hydrating() {
  is_hydrating = true;
}
function end_hydrating() {
  is_hydrating = false;
}
function append(target, node) {
  target.appendChild(node);
}
function append_styles(target, style_sheet_id, styles) {
  const append_styles_to = get_root_for_style(target);
  if (!append_styles_to.getElementById(style_sheet_id)) {
    const style = element("style");
    style.id = style_sheet_id;
    style.textContent = styles;
    append_stylesheet(append_styles_to, style);
  }
}
function get_root_for_style(node) {
  if (!node)
    return document;
  const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
  if (root && root.host) {
    return root;
  }
  return node.ownerDocument;
}
function append_stylesheet(node, style) {
  append(node.head || node, style);
  return style.sheet;
}
function insert(target, node, anchor) {
  target.insertBefore(node, anchor || null);
}
function detach(node) {
  node.parentNode.removeChild(node);
}
function destroy_each(iterations, detaching) {
  for (let i = 0; i < iterations.length; i += 1) {
    if (iterations[i])
      iterations[i].d(detaching);
  }
}
function element(name) {
  return document.createElement(name);
}
function text(data) {
  return document.createTextNode(data);
}
function space() {
  return text(" ");
}
function empty() {
  return text("");
}
function listen(node, event, handler, options) {
  node.addEventListener(event, handler, options);
  return () => node.removeEventListener(event, handler, options);
}
function attr(node, attribute, value) {
  if (value == null)
    node.removeAttribute(attribute);
  else if (node.getAttribute(attribute) !== value)
    node.setAttribute(attribute, value);
}
function children(element2) {
  return Array.from(element2.childNodes);
}
function set_data(text2, data) {
  data = "" + data;
  if (text2.wholeText !== data)
    text2.data = data;
}
var current_component;
function set_current_component(component) {
  current_component = component;
}
var dirty_components = [];
var binding_callbacks = [];
var render_callbacks = [];
var flush_callbacks = [];
var resolved_promise = Promise.resolve();
var update_scheduled = false;
function schedule_update() {
  if (!update_scheduled) {
    update_scheduled = true;
    resolved_promise.then(flush);
  }
}
function add_render_callback(fn) {
  render_callbacks.push(fn);
}
var seen_callbacks = /* @__PURE__ */ new Set();
var flushidx = 0;
function flush() {
  const saved_component = current_component;
  do {
    while (flushidx < dirty_components.length) {
      const component = dirty_components[flushidx];
      flushidx++;
      set_current_component(component);
      update(component.$$);
    }
    set_current_component(null);
    dirty_components.length = 0;
    flushidx = 0;
    while (binding_callbacks.length)
      binding_callbacks.pop()();
    for (let i = 0; i < render_callbacks.length; i += 1) {
      const callback = render_callbacks[i];
      if (!seen_callbacks.has(callback)) {
        seen_callbacks.add(callback);
        callback();
      }
    }
    render_callbacks.length = 0;
  } while (dirty_components.length);
  while (flush_callbacks.length) {
    flush_callbacks.pop()();
  }
  update_scheduled = false;
  seen_callbacks.clear();
  set_current_component(saved_component);
}
function update($$) {
  if ($$.fragment !== null) {
    $$.update();
    run_all($$.before_update);
    const dirty = $$.dirty;
    $$.dirty = [-1];
    $$.fragment && $$.fragment.p($$.ctx, dirty);
    $$.after_update.forEach(add_render_callback);
  }
}
var outroing = /* @__PURE__ */ new Set();
var outros;
function group_outros() {
  outros = {
    r: 0,
    c: [],
    p: outros
  };
}
function check_outros() {
  if (!outros.r) {
    run_all(outros.c);
  }
  outros = outros.p;
}
function transition_in(block, local) {
  if (block && block.i) {
    outroing.delete(block);
    block.i(local);
  }
}
function transition_out(block, local, detach2, callback) {
  if (block && block.o) {
    if (outroing.has(block))
      return;
    outroing.add(block);
    outros.c.push(() => {
      outroing.delete(block);
      if (callback) {
        if (detach2)
          block.d(1);
        callback();
      }
    });
    block.o(local);
  } else if (callback) {
    callback();
  }
}
var globals = typeof window !== "undefined" ? window : typeof globalThis !== "undefined" ? globalThis : global;
function create_component(block) {
  block && block.c();
}
function mount_component(component, target, anchor, customElement) {
  const { fragment, after_update } = component.$$;
  fragment && fragment.m(target, anchor);
  if (!customElement) {
    add_render_callback(() => {
      const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);
      if (component.$$.on_destroy) {
        component.$$.on_destroy.push(...new_on_destroy);
      } else {
        run_all(new_on_destroy);
      }
      component.$$.on_mount = [];
    });
  }
  after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
  const $$ = component.$$;
  if ($$.fragment !== null) {
    run_all($$.on_destroy);
    $$.fragment && $$.fragment.d(detaching);
    $$.on_destroy = $$.fragment = null;
    $$.ctx = [];
  }
}
function make_dirty(component, i) {
  if (component.$$.dirty[0] === -1) {
    dirty_components.push(component);
    schedule_update();
    component.$$.dirty.fill(0);
  }
  component.$$.dirty[i / 31 | 0] |= 1 << i % 31;
}
function init(component, options, instance2, create_fragment4, not_equal, props, append_styles2, dirty = [-1]) {
  const parent_component = current_component;
  set_current_component(component);
  const $$ = component.$$ = {
    fragment: null,
    ctx: [],
    props,
    update: noop,
    not_equal,
    bound: blank_object(),
    on_mount: [],
    on_destroy: [],
    on_disconnect: [],
    before_update: [],
    after_update: [],
    context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
    callbacks: blank_object(),
    dirty,
    skip_bound: false,
    root: options.target || parent_component.$$.root
  };
  append_styles2 && append_styles2($$.root);
  let ready = false;
  $$.ctx = instance2 ? instance2(component, options.props || {}, (i, ret, ...rest) => {
    const value = rest.length ? rest[0] : ret;
    if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
      if (!$$.skip_bound && $$.bound[i])
        $$.bound[i](value);
      if (ready)
        make_dirty(component, i);
    }
    return ret;
  }) : [];
  $$.update();
  ready = true;
  run_all($$.before_update);
  $$.fragment = create_fragment4 ? create_fragment4($$.ctx) : false;
  if (options.target) {
    if (options.hydrate) {
      start_hydrating();
      const nodes = children(options.target);
      $$.fragment && $$.fragment.l(nodes);
      nodes.forEach(detach);
    } else {
      $$.fragment && $$.fragment.c();
    }
    if (options.intro)
      transition_in(component.$$.fragment);
    mount_component(component, options.target, options.anchor, options.customElement);
    end_hydrating();
    flush();
  }
  set_current_component(parent_component);
}
var SvelteElement;
if (typeof HTMLElement === "function") {
  SvelteElement = class extends HTMLElement {
    constructor() {
      super();
      this.attachShadow({ mode: "open" });
    }
    connectedCallback() {
      const { on_mount } = this.$$;
      this.$$.on_disconnect = on_mount.map(run).filter(is_function);
      for (const key in this.$$.slotted) {
        this.appendChild(this.$$.slotted[key]);
      }
    }
    attributeChangedCallback(attr2, _oldValue, newValue) {
      this[attr2] = newValue;
    }
    disconnectedCallback() {
      run_all(this.$$.on_disconnect);
    }
    $destroy() {
      destroy_component(this, 1);
      this.$destroy = noop;
    }
    $on(type, callback) {
      if (!is_function(callback)) {
        return noop;
      }
      const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
      callbacks.push(callback);
      return () => {
        const index = callbacks.indexOf(callback);
        if (index !== -1)
          callbacks.splice(index, 1);
      };
    }
    $set($$props) {
      if (this.$$set && !is_empty($$props)) {
        this.$$.skip_bound = true;
        this.$$set($$props);
        this.$$.skip_bound = false;
      }
    }
  };
}
var SvelteComponent = class {
  $destroy() {
    destroy_component(this, 1);
    this.$destroy = noop;
  }
  $on(type, callback) {
    if (!is_function(callback)) {
      return noop;
    }
    const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
    callbacks.push(callback);
    return () => {
      const index = callbacks.indexOf(callback);
      if (index !== -1)
        callbacks.splice(index, 1);
    };
  }
  $set($$props) {
    if (this.$$set && !is_empty($$props)) {
      this.$$.skip_bound = true;
      this.$$set($$props);
      this.$$.skip_bound = false;
    }
  }
};

// node_modules/svelte/store/index.mjs
var subscriber_queue = [];
function writable(value, start = noop) {
  let stop;
  const subscribers = /* @__PURE__ */ new Set();
  function set(new_value) {
    if (safe_not_equal(value, new_value)) {
      value = new_value;
      if (stop) {
        const run_queue = !subscriber_queue.length;
        for (const subscriber of subscribers) {
          subscriber[1]();
          subscriber_queue.push(subscriber, value);
        }
        if (run_queue) {
          for (let i = 0; i < subscriber_queue.length; i += 2) {
            subscriber_queue[i][0](subscriber_queue[i + 1]);
          }
          subscriber_queue.length = 0;
        }
      }
    }
  }
  function update2(fn) {
    set(fn(value));
  }
  function subscribe2(run2, invalidate = noop) {
    const subscriber = [run2, invalidate];
    subscribers.add(subscriber);
    if (subscribers.size === 1) {
      stop = start(set) || noop;
    }
    run2(value);
    return () => {
      subscribers.delete(subscriber);
      if (subscribers.size === 0) {
        stop();
        stop = null;
      }
    };
  }
  return { set, update: update2, subscribe: subscribe2 };
}

// src/store.ts
var store = writable({
  noActiveFile: true,
  links: [],
  backLinks: [],
  newLinks: [],
  twoHopLinks: {}
});
var store_default = store;

// src/ui/LinkIcon.svelte
function create_fragment(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.innerHTML = `<svg viewBox="0 0 100 100" width="16" height="16"><path fill="currentColor" stroke="currentColor" d="M73.3,6.7C68,6.7,63,8.7,59.2,12.5l-6.7,6.7c-3.8,3.8-5.9,8.8-5.9,14.1c0,4.2,1.3,8.2,3.7,11.6l-5.5,5.5 c-3.4-2.4-7.4-3.7-11.6-3.7c-5.3,0-10.4,2.1-14.1,5.9l-6.7,6.7C8.7,63,6.7,68,6.7,73.3c0,5.3,2.1,10.4,5.9,14.1s8.8,5.9,14.1,5.9 c5.3,0,10.4-2.1,14.1-5.9l6.7-6.7c3.8-3.8,5.9-8.8,5.9-14.1c0-1.8-0.3-3.6-0.7-5.4l-6,6c-0.2,3.2-1.4,6.3-3.8,8.8l-6.7,6.7 c-5.2,5.2-13.7,5.2-18.9,0c-5.2-5.2-5.2-13.7,0-18.9l6.7-6.7c2.6-2.6,6-3.9,9.4-3.9c2.3,0,4.7,0.7,6.7,1.9L31,64.3 c-0.9,0.8-1.2,2.1-0.9,3.2c0.3,1.2,1.2,2.1,2.4,2.4c1.2,0.3,2.4,0,3.2-0.9L69,35.7c1-1,1.3-2.4,0.7-3.7c-0.5-1.3-1.8-2.1-3.2-2 c-0.9,0-1.7,0.4-2.3,1l-9.1,9.1c-3-5.1-2.4-11.8,2-16.2l6.7-6.7c2.6-2.6,6-3.9,9.4-3.9c3.4,0,6.8,1.3,9.4,3.9 c5.2,5.2,5.2,13.7,0,18.9l-6.7,6.7c-2.4,2.4-5.6,3.7-8.8,3.8l-6,6c1.7,0.5,3.5,0.7,5.4,0.7c5.3,0,10.4-2.1,14.1-5.9l6.7-6.7 c3.8-3.8,5.9-8.8,5.9-14.1c0-5.3-2.1-10.4-5.9-14.1C83.7,8.7,78.7,6.7,73.3,6.7z"></path></svg>`;
      attr(span, "class", "tree-item-icon");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(span);
    }
  };
}
var LinkIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment, safe_not_equal, {});
  }
};
var LinkIcon_default = LinkIcon;

// src/ui/NewLinkIcon.svelte
function create_fragment2(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="svg-icon lucide-file-plus"><path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="12" y1="18" x2="12" y2="12"></line><line x1="9" y1="15" x2="15" y2="15"></line></svg>`;
      attr(span, "class", "tree-item-icon");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(span);
    }
  };
}
var NewLinkIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment2, safe_not_equal, {});
  }
};
var NewLinkIcon_default = NewLinkIcon;

// src/ui/Pane.svelte
function add_css(target) {
  append_styles(target, "svelte-yzawxy", ".tree-item-self.svelte-yzawxy{align-items:center}");
}
function get_each_context(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[10] = list[i];
  return child_ctx;
}
function get_each_context_1(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[13] = list[i];
  const constants_0 = child_ctx[1].twoHopLinks[child_ctx[13]];
  child_ctx[14] = constants_0;
  return child_ctx;
}
function get_each_context_2(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[10] = list[i];
  return child_ctx;
}
function get_each_context_3(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[10] = list[i];
  return child_ctx;
}
function get_each_context_4(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[10] = list[i];
  return child_ctx;
}
function create_else_block(ctx) {
  let div3;
  let div0;
  let t1;
  let div2;
  let div1;
  let t2_value = ctx[1].links.length + "";
  let t2;
  let t3;
  let div4;
  let t4;
  let t5;
  let div8;
  let div5;
  let t7;
  let div7;
  let div6;
  let t8_value = ctx[1].backLinks.length + "";
  let t8;
  let t9;
  let div9;
  let t10;
  let t11;
  let t12;
  let div13;
  let div10;
  let t14;
  let div12;
  let div11;
  let t15_value = ctx[1].newLinks.length + "";
  let t15;
  let t16;
  let div14;
  let t17;
  let current;
  let each_value_4 = ctx[1].links;
  let each_blocks_3 = [];
  for (let i = 0; i < each_value_4.length; i += 1) {
    each_blocks_3[i] = create_each_block_4(get_each_context_4(ctx, each_value_4, i));
  }
  const out = (i) => transition_out(each_blocks_3[i], 1, 1, () => {
    each_blocks_3[i] = null;
  });
  let if_block0 = ctx[1].links.length === 0 && create_if_block_4(ctx);
  let each_value_3 = ctx[1].backLinks;
  let each_blocks_2 = [];
  for (let i = 0; i < each_value_3.length; i += 1) {
    each_blocks_2[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
  }
  const out_1 = (i) => transition_out(each_blocks_2[i], 1, 1, () => {
    each_blocks_2[i] = null;
  });
  let if_block1 = ctx[1].backLinks.length === 0 && create_if_block_3(ctx);
  let each_value_1 = Object.keys(ctx[1].twoHopLinks);
  let each_blocks_1 = [];
  for (let i = 0; i < each_value_1.length; i += 1) {
    each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
  }
  const out_2 = (i) => transition_out(each_blocks_1[i], 1, 1, () => {
    each_blocks_1[i] = null;
  });
  let each_value = ctx[1].newLinks;
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
  }
  const out_3 = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  let if_block2 = ctx[1].newLinks.length === 0 && create_if_block_1(ctx);
  return {
    c() {
      div3 = element("div");
      div0 = element("div");
      div0.textContent = "Links";
      t1 = space();
      div2 = element("div");
      div1 = element("div");
      t2 = text(t2_value);
      t3 = space();
      div4 = element("div");
      for (let i = 0; i < each_blocks_3.length; i += 1) {
        each_blocks_3[i].c();
      }
      t4 = space();
      if (if_block0)
        if_block0.c();
      t5 = space();
      div8 = element("div");
      div5 = element("div");
      div5.textContent = "Backlinks";
      t7 = space();
      div7 = element("div");
      div6 = element("div");
      t8 = text(t8_value);
      t9 = space();
      div9 = element("div");
      for (let i = 0; i < each_blocks_2.length; i += 1) {
        each_blocks_2[i].c();
      }
      t10 = space();
      if (if_block1)
        if_block1.c();
      t11 = space();
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        each_blocks_1[i].c();
      }
      t12 = space();
      div13 = element("div");
      div10 = element("div");
      div10.textContent = "New Links";
      t14 = space();
      div12 = element("div");
      div11 = element("div");
      t15 = text(t15_value);
      t16 = space();
      div14 = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t17 = space();
      if (if_block2)
        if_block2.c();
      attr(div0, "class", "tree-item-inner");
      attr(div1, "class", "tree-item-flair");
      attr(div2, "class", "tree-item-flair-counter");
      attr(div3, "class", "tree-item-self svelte-yzawxy");
      attr(div4, "class", "search-result-container");
      attr(div5, "class", "tree-item-inner");
      attr(div6, "class", "tree-item-flair");
      attr(div7, "class", "tree-item-flair-counter");
      attr(div8, "class", "tree-item-self svelte-yzawxy");
      attr(div9, "class", "search-result-container");
      attr(div10, "class", "tree-item-inner");
      attr(div11, "class", "tree-item-flair");
      attr(div12, "class", "tree-item-flair-counter");
      attr(div13, "class", "tree-item-self svelte-yzawxy");
      attr(div14, "class", "search-result-container");
    },
    m(target, anchor) {
      insert(target, div3, anchor);
      append(div3, div0);
      append(div3, t1);
      append(div3, div2);
      append(div2, div1);
      append(div1, t2);
      insert(target, t3, anchor);
      insert(target, div4, anchor);
      for (let i = 0; i < each_blocks_3.length; i += 1) {
        each_blocks_3[i].m(div4, null);
      }
      append(div4, t4);
      if (if_block0)
        if_block0.m(div4, null);
      insert(target, t5, anchor);
      insert(target, div8, anchor);
      append(div8, div5);
      append(div8, t7);
      append(div8, div7);
      append(div7, div6);
      append(div6, t8);
      insert(target, t9, anchor);
      insert(target, div9, anchor);
      for (let i = 0; i < each_blocks_2.length; i += 1) {
        each_blocks_2[i].m(div9, null);
      }
      append(div9, t10);
      if (if_block1)
        if_block1.m(div9, null);
      insert(target, t11, anchor);
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        each_blocks_1[i].m(target, anchor);
      }
      insert(target, t12, anchor);
      insert(target, div13, anchor);
      append(div13, div10);
      append(div13, t14);
      append(div13, div12);
      append(div12, div11);
      append(div11, t15);
      insert(target, t16, anchor);
      insert(target, div14, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div14, null);
      }
      append(div14, t17);
      if (if_block2)
        if_block2.m(div14, null);
      current = true;
    },
    p(ctx2, dirty) {
      if ((!current || dirty & 2) && t2_value !== (t2_value = ctx2[1].links.length + ""))
        set_data(t2, t2_value);
      if (dirty & 7) {
        each_value_4 = ctx2[1].links;
        let i;
        for (i = 0; i < each_value_4.length; i += 1) {
          const child_ctx = get_each_context_4(ctx2, each_value_4, i);
          if (each_blocks_3[i]) {
            each_blocks_3[i].p(child_ctx, dirty);
            transition_in(each_blocks_3[i], 1);
          } else {
            each_blocks_3[i] = create_each_block_4(child_ctx);
            each_blocks_3[i].c();
            transition_in(each_blocks_3[i], 1);
            each_blocks_3[i].m(div4, t4);
          }
        }
        group_outros();
        for (i = each_value_4.length; i < each_blocks_3.length; i += 1) {
          out(i);
        }
        check_outros();
      }
      if (ctx2[1].links.length === 0) {
        if (if_block0) {
        } else {
          if_block0 = create_if_block_4(ctx2);
          if_block0.c();
          if_block0.m(div4, null);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if ((!current || dirty & 2) && t8_value !== (t8_value = ctx2[1].backLinks.length + ""))
        set_data(t8, t8_value);
      if (dirty & 7) {
        each_value_3 = ctx2[1].backLinks;
        let i;
        for (i = 0; i < each_value_3.length; i += 1) {
          const child_ctx = get_each_context_3(ctx2, each_value_3, i);
          if (each_blocks_2[i]) {
            each_blocks_2[i].p(child_ctx, dirty);
            transition_in(each_blocks_2[i], 1);
          } else {
            each_blocks_2[i] = create_each_block_3(child_ctx);
            each_blocks_2[i].c();
            transition_in(each_blocks_2[i], 1);
            each_blocks_2[i].m(div9, t10);
          }
        }
        group_outros();
        for (i = each_value_3.length; i < each_blocks_2.length; i += 1) {
          out_1(i);
        }
        check_outros();
      }
      if (ctx2[1].backLinks.length === 0) {
        if (if_block1) {
        } else {
          if_block1 = create_if_block_3(ctx2);
          if_block1.c();
          if_block1.m(div9, null);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      if (dirty & 7) {
        each_value_1 = Object.keys(ctx2[1].twoHopLinks);
        let i;
        for (i = 0; i < each_value_1.length; i += 1) {
          const child_ctx = get_each_context_1(ctx2, each_value_1, i);
          if (each_blocks_1[i]) {
            each_blocks_1[i].p(child_ctx, dirty);
            transition_in(each_blocks_1[i], 1);
          } else {
            each_blocks_1[i] = create_each_block_1(child_ctx);
            each_blocks_1[i].c();
            transition_in(each_blocks_1[i], 1);
            each_blocks_1[i].m(t12.parentNode, t12);
          }
        }
        group_outros();
        for (i = each_value_1.length; i < each_blocks_1.length; i += 1) {
          out_2(i);
        }
        check_outros();
      }
      if ((!current || dirty & 2) && t15_value !== (t15_value = ctx2[1].newLinks.length + ""))
        set_data(t15, t15_value);
      if (dirty & 7) {
        each_value = ctx2[1].newLinks;
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(div14, t17);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out_3(i);
        }
        check_outros();
      }
      if (ctx2[1].newLinks.length === 0) {
        if (if_block2) {
        } else {
          if_block2 = create_if_block_1(ctx2);
          if_block2.c();
          if_block2.m(div14, null);
        }
      } else if (if_block2) {
        if_block2.d(1);
        if_block2 = null;
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value_4.length; i += 1) {
        transition_in(each_blocks_3[i]);
      }
      for (let i = 0; i < each_value_3.length; i += 1) {
        transition_in(each_blocks_2[i]);
      }
      for (let i = 0; i < each_value_1.length; i += 1) {
        transition_in(each_blocks_1[i]);
      }
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      each_blocks_3 = each_blocks_3.filter(Boolean);
      for (let i = 0; i < each_blocks_3.length; i += 1) {
        transition_out(each_blocks_3[i]);
      }
      each_blocks_2 = each_blocks_2.filter(Boolean);
      for (let i = 0; i < each_blocks_2.length; i += 1) {
        transition_out(each_blocks_2[i]);
      }
      each_blocks_1 = each_blocks_1.filter(Boolean);
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        transition_out(each_blocks_1[i]);
      }
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div3);
      if (detaching)
        detach(t3);
      if (detaching)
        detach(div4);
      destroy_each(each_blocks_3, detaching);
      if (if_block0)
        if_block0.d();
      if (detaching)
        detach(t5);
      if (detaching)
        detach(div8);
      if (detaching)
        detach(t9);
      if (detaching)
        detach(div9);
      destroy_each(each_blocks_2, detaching);
      if (if_block1)
        if_block1.d();
      if (detaching)
        detach(t11);
      destroy_each(each_blocks_1, detaching);
      if (detaching)
        detach(t12);
      if (detaching)
        detach(div13);
      if (detaching)
        detach(t16);
      if (detaching)
        detach(div14);
      destroy_each(each_blocks, detaching);
      if (if_block2)
        if_block2.d();
    }
  };
}
function create_if_block(ctx) {
  let div;
  return {
    c() {
      div = element("div");
      div.textContent = "No active file.";
      attr(div, "class", "pane-empty");
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
function create_each_block_4(ctx) {
  let div;
  let linkicon;
  let t0;
  let t1_value = ctx[2](ctx[10]) + "";
  let t1;
  let current;
  let mounted;
  let dispose;
  linkicon = new LinkIcon_default({});
  function click_handler(...args) {
    return ctx[4](ctx[10], ...args);
  }
  return {
    c() {
      div = element("div");
      create_component(linkicon.$$.fragment);
      t0 = space();
      t1 = text(t1_value);
      attr(div, "class", "tree-item-self search-result-file-title is-clickable svelte-yzawxy");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(linkicon, div, null);
      append(div, t0);
      append(div, t1);
      current = true;
      if (!mounted) {
        dispose = listen(div, "click", click_handler);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if ((!current || dirty & 2) && t1_value !== (t1_value = ctx[2](ctx[10]) + ""))
        set_data(t1, t1_value);
    },
    i(local) {
      if (current)
        return;
      transition_in(linkicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(linkicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(linkicon);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_4(ctx) {
  let div;
  return {
    c() {
      div = element("div");
      div.textContent = "No links found.";
      attr(div, "class", "search-empty-state");
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
function create_each_block_3(ctx) {
  let div;
  let linkicon;
  let t0;
  let t1_value = ctx[2](ctx[10]) + "";
  let t1;
  let current;
  let mounted;
  let dispose;
  linkicon = new LinkIcon_default({});
  function click_handler_1(...args) {
    return ctx[5](ctx[10], ...args);
  }
  return {
    c() {
      div = element("div");
      create_component(linkicon.$$.fragment);
      t0 = space();
      t1 = text(t1_value);
      attr(div, "class", "tree-item-self search-result-file-title is-clickable svelte-yzawxy");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(linkicon, div, null);
      append(div, t0);
      append(div, t1);
      current = true;
      if (!mounted) {
        dispose = listen(div, "click", click_handler_1);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if ((!current || dirty & 2) && t1_value !== (t1_value = ctx[2](ctx[10]) + ""))
        set_data(t1, t1_value);
    },
    i(local) {
      if (current)
        return;
      transition_in(linkicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(linkicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(linkicon);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_3(ctx) {
  let div;
  return {
    c() {
      div = element("div");
      div.textContent = "No back links found.";
      attr(div, "class", "search-empty-state");
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
function create_if_block_2(ctx) {
  let div3;
  let div0;
  let t0_value = ctx[2](ctx[13]) + "";
  let t0;
  let t1;
  let div2;
  let div1;
  let t2_value = ctx[14].length + "";
  let t2;
  let t3;
  let div4;
  let current;
  let each_value_2 = ctx[14];
  let each_blocks = [];
  for (let i = 0; i < each_value_2.length; i += 1) {
    each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      div3 = element("div");
      div0 = element("div");
      t0 = text(t0_value);
      t1 = space();
      div2 = element("div");
      div1 = element("div");
      t2 = text(t2_value);
      t3 = space();
      div4 = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div0, "class", "tree-item-inner");
      attr(div1, "class", "tree-item-flair");
      attr(div2, "class", "tree-item-flair-counter");
      attr(div3, "class", "tree-item-self svelte-yzawxy");
      attr(div4, "class", "search-result-container");
    },
    m(target, anchor) {
      insert(target, div3, anchor);
      append(div3, div0);
      append(div0, t0);
      append(div3, t1);
      append(div3, div2);
      append(div2, div1);
      append(div1, t2);
      insert(target, t3, anchor);
      insert(target, div4, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div4, null);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if ((!current || dirty & 2) && t0_value !== (t0_value = ctx2[2](ctx2[13]) + ""))
        set_data(t0, t0_value);
      if ((!current || dirty & 2) && t2_value !== (t2_value = ctx2[14].length + ""))
        set_data(t2, t2_value);
      if (dirty & 7) {
        each_value_2 = ctx2[14];
        let i;
        for (i = 0; i < each_value_2.length; i += 1) {
          const child_ctx = get_each_context_2(ctx2, each_value_2, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block_2(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(div4, null);
          }
        }
        group_outros();
        for (i = each_value_2.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value_2.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div3);
      if (detaching)
        detach(t3);
      if (detaching)
        detach(div4);
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_each_block_2(ctx) {
  let div;
  let linkicon;
  let t0;
  let t1_value = ctx[2](ctx[10]) + "";
  let t1;
  let current;
  let mounted;
  let dispose;
  linkicon = new LinkIcon_default({});
  function click_handler_2(...args) {
    return ctx[6](ctx[10], ...args);
  }
  return {
    c() {
      div = element("div");
      create_component(linkicon.$$.fragment);
      t0 = space();
      t1 = text(t1_value);
      attr(div, "class", "tree-item-self search-result-file-title is-clickable svelte-yzawxy");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(linkicon, div, null);
      append(div, t0);
      append(div, t1);
      current = true;
      if (!mounted) {
        dispose = listen(div, "click", click_handler_2);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if ((!current || dirty & 2) && t1_value !== (t1_value = ctx[2](ctx[10]) + ""))
        set_data(t1, t1_value);
    },
    i(local) {
      if (current)
        return;
      transition_in(linkicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(linkicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(linkicon);
      mounted = false;
      dispose();
    }
  };
}
function create_each_block_1(ctx) {
  let if_block_anchor;
  let current;
  let if_block = ctx[14].length > 0 && create_if_block_2(ctx);
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (ctx2[14].length > 0) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & 2) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_2(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_each_block(ctx) {
  let div;
  let newlinkicon;
  let t0;
  let t1_value = ctx[2](ctx[10]) + "";
  let t1;
  let current;
  let mounted;
  let dispose;
  newlinkicon = new NewLinkIcon_default({});
  function click_handler_3(...args) {
    return ctx[7](ctx[10], ...args);
  }
  return {
    c() {
      div = element("div");
      create_component(newlinkicon.$$.fragment);
      t0 = space();
      t1 = text(t1_value);
      attr(div, "class", "tree-item-self search-result-file-title is-clickable svelte-yzawxy");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(newlinkicon, div, null);
      append(div, t0);
      append(div, t1);
      current = true;
      if (!mounted) {
        dispose = listen(div, "click", click_handler_3);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if ((!current || dirty & 2) && t1_value !== (t1_value = ctx[2](ctx[10]) + ""))
        set_data(t1, t1_value);
    },
    i(local) {
      if (current)
        return;
      transition_in(newlinkicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(newlinkicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(newlinkicon);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_1(ctx) {
  let div;
  return {
    c() {
      div = element("div");
      div.textContent = "No new links found.";
      attr(div, "class", "search-empty-state");
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
function create_fragment3(ctx) {
  let div;
  let current_block_type_index;
  let if_block;
  let current;
  const if_block_creators = [create_if_block, create_else_block];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (ctx2[1].noActiveFile)
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      div = element("div");
      if_block.c();
      attr(div, "class", "backlink-pane");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if_blocks[current_block_type_index].m(div, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(div, null);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      if_blocks[current_block_type_index].d();
    }
  };
}
function instance($$self, $$props, $$invalidate) {
  let $store;
  component_subscribe($$self, store_default, ($$value) => $$invalidate(1, $store = $$value));
  let { openLink } = $$props;
  let { settings } = $$props;
  const { experimentalHideFolderPath } = settings;
  const extractFolderName = (path) => {
    if (!experimentalHideFolderPath)
      return path;
    const parts = path.split("/");
    return parts[parts.length - 1];
  };
  const fileName = (path) => {
    const name = path.replace(/.md$/, "");
    return extractFolderName(name);
  };
  const click_handler = (link, e) => openLink(e, link);
  const click_handler_1 = (link, e) => openLink(e, link);
  const click_handler_2 = (link, e) => openLink(e, link);
  const click_handler_3 = (link, e) => openLink(e, link);
  $$self.$$set = ($$props2) => {
    if ("openLink" in $$props2)
      $$invalidate(0, openLink = $$props2.openLink);
    if ("settings" in $$props2)
      $$invalidate(3, settings = $$props2.settings);
  };
  return [
    openLink,
    $store,
    fileName,
    settings,
    click_handler,
    click_handler_1,
    click_handler_2,
    click_handler_3
  ];
}
var Pane = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance, create_fragment3, safe_not_equal, { openLink: 0, settings: 3 }, add_css);
  }
};
var Pane_default = Pane;

// src/view.tsx
var VIEW_TYPE = "relation-view";
var getBackLinks = (resolvedLinks, filePath, ignorePath) => {
  const backLinks = [];
  for (const src of Object.keys(resolvedLinks)) {
    const links = resolvedLinks[src];
    for (const dest of Object.keys(links)) {
      if (dest === filePath && src !== ignorePath) {
        backLinks.push(src);
      }
    }
  }
  return backLinks;
};
var RelationView = class extends import_obsidian.ItemView {
  constructor(leaf, getSettings) {
    super(leaf);
    this.getSettings = getSettings;
    this.collect = this.collect.bind(this);
  }
  getViewType() {
    return VIEW_TYPE;
  }
  getDisplayText() {
    return "Relation View";
  }
  getIcon() {
    return "link";
  }
  refresh() {
    this.component.$destroy();
    this.render();
  }
  async onOpen() {
    this.render();
    this.app.workspace.on("file-open", this.collect);
    this.app.metadataCache.on("resolved", this.collect);
  }
  async onClose() {
    this.component.$destroy();
    this.app.workspace.off("file-open", this.collect);
    this.app.metadataCache.off("resolved", this.collect);
  }
  render() {
    this.component = new Pane_default({
      target: this.contentEl,
      props: {
        openLink: (e, link) => {
          const file = this.app.workspace.getActiveFile();
          if (!file)
            return;
          this.app.workspace.openLinkText(link, file.path, import_obsidian.Keymap.isModEvent(e));
        },
        settings: this.getSettings()
      }
    });
    this.collect();
  }
  collect() {
    const file = this.app.workspace.getActiveFile();
    if (!file) {
      store_default.set({
        noActiveFile: true,
        links: [],
        newLinks: [],
        backLinks: [],
        twoHopLinks: {}
      });
      return;
    }
    const resolvedLinks = this.app.metadataCache.resolvedLinks;
    const links = Object.keys(resolvedLinks[file.path] || {});
    const unresolvedLinks = this.app.metadataCache.unresolvedLinks;
    const newLinks = Object.keys(unresolvedLinks[file.path] || {});
    const backLinks = getBackLinks(resolvedLinks, file.path);
    let frontLinks = Object.keys(resolvedLinks[file.path]) || [];
    let frontUnresolvedLinks = Object.keys(unresolvedLinks[file.path]) || [];
    let twoHopLinks = {};
    for (let page of frontLinks) {
      twoHopLinks[page] = getBackLinks(resolvedLinks, page, file.path);
    }
    for (let page of frontUnresolvedLinks) {
      twoHopLinks[page] = getBackLinks(unresolvedLinks, page, file.path);
    }
    store_default.set({
      noActiveFile: false,
      links,
      newLinks,
      backLinks,
      twoHopLinks
    });
  }
};

// src/settings.ts
var import_obsidian2 = require("obsidian");
var DEFAULT_SETTINGS = {
  experimentalHideFolderPath: false
};
var SettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h3", { text: "Advanced" });
    new import_obsidian2.Setting(containerEl).setName("Hide folder name").setDesc("it shows file name only instead of full path.").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.experimentalHideFolderPath).onChange(async (value) => {
        await this.plugin.updateSettings({
          experimentalHideFolderPath: value
        });
      });
    });
  }
};

// src/main.ts
var RelationPanePlugin = class extends import_obsidian3.Plugin {
  get settings() {
    return this._settings;
  }
  get activeView() {
    var _a;
    return (_a = this.app.workspace.getLeavesOfType(VIEW_TYPE)[0]) == null ? void 0 : _a.view;
  }
  async onload() {
    this.addCommand({
      id: "open-relation-panel",
      name: "Open relation view",
      checkCallback: (checking) => {
        if (checking) {
          return this.app.workspace.getLeavesOfType(VIEW_TYPE).length === 0;
        }
        this.activateView();
      }
    });
    this.registerView(VIEW_TYPE, (leaf) => {
      return new RelationView(leaf, () => this.settings);
    });
    await this.loadSettings();
    this.addSettingTab(new SettingTab(this.app, this));
    if (this.app.workspace.layoutReady) {
      this.activateView();
    }
  }
  onunload() {
    this.app.workspace.detachLeavesOfType(VIEW_TYPE);
  }
  async loadSettings() {
    this._settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async updateSettings(newSettings) {
    var _a;
    this._settings = Object.assign({}, this._settings, newSettings);
    await this.saveData(this._settings);
    (_a = this.activeView) == null ? void 0 : _a.refresh();
  }
  async activateView() {
    this.app.workspace.detachLeavesOfType(VIEW_TYPE);
    const workspaceLeaf = this.app.workspace.getRightLeaf(false);
    await workspaceLeaf.setViewState({
      type: VIEW_TYPE,
      active: true
    });
    this.app.workspace.revealLeaf(this.app.workspace.getLeavesOfType(VIEW_TYPE)[0]);
  }
};
