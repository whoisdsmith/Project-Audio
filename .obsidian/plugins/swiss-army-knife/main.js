/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => SwissArmyKnifePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var SwissArmyKnifePlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.addCommand({
      id: "replace-doubled-empty-lines-with-single",
      name: "Replace doubled empty lines with single",
      editorCallback: (editor, view) => this.replaceDoubledEmptyLinesWithSingle(editor)
    });
    this.addCommand({
      id: "remove-empty-lines",
      name: "Remove empty lines",
      editorCallback: (editor, view) => this.removeEmptyLines(editor)
    });
  }
  replaceDoubledEmptyLinesWithSingle(editor) {
    const doubledEmptyLinesWithOptionalWhiteSpacesRegex = /^\s*?\n\s*?\n/gm;
    return replaceRegexInFile(editor, doubledEmptyLinesWithOptionalWhiteSpacesRegex, "\n");
  }
  removeEmptyLines(editor) {
    const emptyLinesWithOptionalWhitespacesRegex = /\s*?\n\s*?\n/gm;
    return replaceRegexInFile(editor, emptyLinesWithOptionalWhitespacesRegex, "\n");
  }
};
function replaceRegexInFile(editor, pattern, replacement) {
  const currentText = editor.getValue();
  const updatedText = currentText.replace(pattern, replacement);
  editor.setValue(updatedText);
}
