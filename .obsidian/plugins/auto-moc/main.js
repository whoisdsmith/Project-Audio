/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  TagSuggestModal: () => TagSuggestModal,
  default: () => AutoMOC
});
var import_obsidian = __toModule(require("obsidian"));
var DEFAULT_SETTINGS = {
  showRibbonButton: true,
  linkToHeading: false,
  linkingMentionsNotice: true,
  noNewLinksNotice: true,
  newLinksAddedNotice: false
};
var TagSuggestModal = class extends import_obsidian.FuzzySuggestModal {
  constructor(app2, plugin) {
    super(app2);
    this.plugin = plugin;
  }
  onOpen() {
    this.setPlaceholder("Import notes with tags matching...");
    this.setInstructions([
      { command: "\u2191\u2193", purpose: "to navigate" },
      { command: "\u21B5", purpose: "to select tag" },
      { command: "esc", purpose: "to dismiss" }
    ]);
    this.inputEl.focus();
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
  getItems() {
    const allFiles = this.app.metadataCache.resolvedLinks;
    let tagsSet = new Set();
    Object.keys(allFiles).forEach((key) => {
      const file = this.app.vault.getAbstractFileByPath(key);
      if (file instanceof import_obsidian.TFile) {
        const body_tags = app.metadataCache.getFileCache(file).tags;
        const frontmatter = this.app.metadataCache.getFileCache(file).frontmatter;
        if (body_tags) {
          for (const tag of body_tags) {
            tagsSet.add(tag["tag"]);
          }
        }
        let f_tags = [];
        if (frontmatter) {
          if (Array.isArray(frontmatter["tags"])) {
            f_tags = frontmatter["tags"];
            for (const f_tag of f_tags) {
              tagsSet.add("#" + f_tag);
            }
          }
          if (String.isString(frontmatter["tags"])) {
            f_tags = frontmatter["tags"].split(", ");
            for (const f_tag of f_tags) {
              tagsSet.add("#" + f_tag);
            }
          }
        }
      }
    });
    return Array.from(tagsSet).sort();
  }
  getItemText(item) {
    return item;
  }
  onChooseItem(item, evt) {
    this.selection = item;
    this.plugin.runAutoMOC(item);
  }
};
var AutoMOC = class extends import_obsidian.Plugin {
  getPresentLinks(currFilePath) {
    const allFiles = this.app.metadataCache.resolvedLinks;
    const presentLinks = Object.keys(allFiles[currFilePath]);
    return presentLinks.sort();
  }
  getLinkedMentions(currFilePath) {
    const allFiles = this.app.metadataCache.resolvedLinks;
    let linkedMentions = [];
    Object.keys(allFiles).forEach((key) => {
      if (currFilePath in allFiles[key]) {
        linkedMentions.push(key);
      }
    });
    return linkedMentions.sort();
  }
  getTaggedMentions(tag) {
    const allFiles = this.app.metadataCache.resolvedLinks;
    let taggedMentions = [];
    const toCompare = tag.replace("#", "");
    Object.keys(allFiles).forEach((key) => {
      const file = this.app.vault.getAbstractFileByPath(key);
      if (file instanceof import_obsidian.TFile) {
        const body_tags = app.metadataCache.getFileCache(file).tags;
        const frontmatter = this.app.metadataCache.getFileCache(file).frontmatter;
        if (body_tags) {
          for (const tag2 of body_tags) {
            if (tag2["tag"].replace("#", "") === toCompare) {
              taggedMentions.push(file.path);
            }
          }
        }
        if (frontmatter) {
          let f_tags = [];
          if (Array.isArray(frontmatter["tags"])) {
            f_tags = frontmatter["tags"];
            for (const f_tag of f_tags) {
              if (f_tag === toCompare) {
                taggedMentions.push(file.path);
              }
            }
          }
          if (String.isString(frontmatter["tags"])) {
            f_tags = frontmatter["tags"].split(", ");
            for (const f_tag of f_tags) {
              if (f_tag === toCompare) {
                taggedMentions.push(file.path);
              }
            }
          }
        }
      }
    });
    const uniqueTaggedMentions = taggedMentions.filter((value, index, array) => array.indexOf(value) === index);
    return uniqueTaggedMentions;
  }
  addMissingLinks(activeFileView, presentLinks, allLinkedMentions, tag) {
    return __async(this, null, function* () {
      let addFlag = false;
      for (const path of allLinkedMentions) {
        if (!presentLinks.includes(path)) {
          const file = this.app.vault.getAbstractFileByPath(path);
          if (file instanceof import_obsidian.TFile) {
            const fileAliases = this.app.metadataCache.getFileCache(file).frontmatter;
            let alias = "";
            if (fileAliases && Array.isArray(fileAliases["aliases"]) && fileAliases["aliases"].length > 0) {
              alias = "|" + fileAliases.aliases[0];
            }
            let closestHeading = "";
            let allHeadings = [];
            if (this.settings.linkToHeading) {
              const headingsLocations = yield this.getHeadingsLocationsInFile(path);
              const linkTagLocations = yield this.getLinkTagLocationsInFile(activeFileView, path, tag);
              for (let i = 0; i < linkTagLocations.length; i++) {
                closestHeading = this.determineClosestHeading(headingsLocations, linkTagLocations[i]);
                allHeadings.push(closestHeading);
              }
            }
            if (allHeadings.length > 0) {
              for (let i = 0; i < allHeadings.length; i++) {
                activeFileView.editor.replaceSelection(this.app.fileManager.generateMarkdownLink(file, activeFileView.file.path, "#" + allHeadings[i], alias = alias) + "\n");
              }
            } else {
              activeFileView.editor.replaceSelection(this.app.fileManager.generateMarkdownLink(file, activeFileView.file.path, alias = alias) + "\n");
            }
            addFlag = true;
          }
        }
      }
      if (this.settings.newLinksAddedNotice && addFlag)
        new import_obsidian.Notice("New links added to note");
      else if (this.settings.noNewLinksNotice && !addFlag)
        new import_obsidian.Notice("No new links found");
    });
  }
  getHeadingsLocationsInFile(filePath) {
    return __async(this, null, function* () {
      const file = this.app.vault.getAbstractFileByPath(filePath);
      if (file instanceof import_obsidian.TFile) {
        const fileContent = yield this.app.vault.read(file);
        const lines = fileContent.split("\n");
        const regXHeader = /#{1,6}\s.+(?=)/g;
        let headings = [];
        lines.forEach((line) => {
          const match = line.match(regXHeader);
          if (match)
            headings.push(match[0].replace(/#{1,6}\s/g, ""));
          else
            headings.push("-1");
        });
        return headings;
      }
    });
  }
  getLinkTagLocationsInFile(activeFileView, filePath, tag) {
    return __async(this, null, function* () {
      const file = this.app.vault.getAbstractFileByPath(filePath);
      if (file instanceof import_obsidian.TFile) {
        const fileContent = yield this.app.vault.read(file);
        const lines = fileContent.split("\n");
        let lineContent = [];
        const activeFileName = activeFileView.file.name.substring(0, activeFileView.file.name.length - 3);
        let toSearch = "";
        if (!tag) {
          toSearch = "[[" + activeFileName + "]]";
        } else
          toSearch = tag;
        lines.forEach((line) => {
          if (line.includes(toSearch))
            lineContent.push(toSearch);
          else
            lineContent.push("-1");
        });
        let toReturn = [];
        for (let i = 0; i < lineContent.length; i++) {
          if (lineContent[i] === toSearch)
            toReturn.push(i);
        }
        return toReturn;
      }
    });
  }
  determineClosestHeading(headingsLocations, linkTagLocation) {
    let distances = [];
    headingsLocations.forEach((item, index) => {
      if (item != "-1")
        distances.push(Math.abs(index - linkTagLocation));
      else
        distances.push(-1);
    });
    let minIndex = -1;
    let minValue = Infinity;
    for (let i = 0; i < distances.length; i += 1) {
      if (distances[i] != -1) {
        if (distances[i] < minValue) {
          minIndex = i;
          minValue = distances[i];
        }
      }
    }
    if (minIndex === linkTagLocation) {
      headingsLocations[minIndex] = headingsLocations[minIndex].replace(/#/g, "").trim();
    }
    return headingsLocations[minIndex];
  }
  runAutoMOC(tag) {
    const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (view != null && view.file.extension === "md") {
      if (this.settings.linkingMentionsNotice)
        new import_obsidian.Notice("Linking mentions");
      const presentLinks = this.getPresentLinks(view.file.path);
      let linkTagMentions;
      if (!tag) {
        linkTagMentions = this.getLinkedMentions(view.file.path);
      } else {
        linkTagMentions = this.getTaggedMentions(tag);
      }
      this.addMissingLinks(view, presentLinks, linkTagMentions, tag);
    } else {
      new import_obsidian.Notice("Failed to link mentions, file type is not a markdown file");
    }
  }
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      if (this.settings.showRibbonButton) {
        const ribbonIconEl = this.addRibbonIcon("sheets-in-box", "AutoMOC", (evt) => {
          this.runAutoMOC();
        });
      }
      this.addCommand({
        id: "add-missing-linked-mentions",
        name: "Add missing linked mentions at the cursor position",
        editorCallback: (editor, view) => {
          this.runAutoMOC();
        }
      });
      this.addCommand({
        id: "add-missing-notes-by-tag",
        name: "Add missing notes with specific tag at the current cursor location",
        editorCallback: (editor, view) => {
          new TagSuggestModal(this.app, this).open();
        }
      });
      this.addSettingTab(new AutoMOCSettingTab(this.app, this));
    });
  }
  onunload() {
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
var AutoMOCSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Functionality" });
    new import_obsidian.Setting(containerEl).setName("Show ribbon button").setDesc("Enable or disable the ribbon button for this plugin. You can still run the plugin with a hotkey (requires restart)").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showRibbonButton).onChange((showRibbonButton) => {
        this.plugin.settings.showRibbonButton = showRibbonButton;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Link to heading").setDesc("Creates the link to the heading closest to the link/tag. This is performed in a greedy manner").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.linkToHeading).onChange((linkToHeading) => {
        this.plugin.settings.linkToHeading = linkToHeading;
        this.plugin.saveSettings();
      });
    });
    containerEl.createEl("h2", { text: "Notifications" });
    new import_obsidian.Setting(containerEl).setName("Linking mentions").setDesc("Enable or disable notifications for when AutoMoc begins to run").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.linkingMentionsNotice).onChange((value) => {
        this.plugin.settings.linkingMentionsNotice = value;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("New links added").setDesc("Enable or disable notifications for when new links are added to a note").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.newLinksAddedNotice).onChange((value) => {
        this.plugin.settings.newLinksAddedNotice = value;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("No new links found").setDesc("Enable or disable notifications for when no new links are added to a note").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.noNewLinksNotice).onChange((value) => {
        this.plugin.settings.noNewLinksNotice = value;
        this.plugin.saveSettings();
      });
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
