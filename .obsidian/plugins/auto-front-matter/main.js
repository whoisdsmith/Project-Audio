/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => AutoFrontMatterPlugin
});
module.exports = __toCommonJS(main_exports);

// node_modules/lodash-es/isUndefined.js
function isUndefined(value) {
  return value === void 0;
}
var isUndefined_default = isUndefined;

// node_modules/nanoid/index.browser.js
var random = (bytes) => crypto.getRandomValues(new Uint8Array(bytes));
var customRandom = (alphabet, defaultSize, getRandom) => {
  let mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1;
  let step = -~(1.6 * mask * defaultSize / alphabet.length);
  return (size = defaultSize) => {
    let id = "";
    while (true) {
      let bytes = getRandom(step);
      let j = step;
      while (j--) {
        id += alphabet[bytes[j] & mask] || "";
        if (id.length === size)
          return id;
      }
    }
  };
};
var customAlphabet = (alphabet, size = 21) => customRandom(alphabet, size, random);

// main.ts
var import_obsidian3 = require("obsidian");

// src/setting-tab.ts
var import_obsidian = require("obsidian");
var AutoFrontMatterSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h1", { text: "Auto Front Matter" });
    new import_obsidian.Setting(containerEl).setName("Automatically update the front matter when a file changed").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.auto).onChange(async (value) => {
        this.plugin.settings.auto = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Reorder front matter keys").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.isReorderRequired).onChange(async (value) => {
        this.plugin.settings.isReorderRequired = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Use title").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.isTitleRequired).onChange(async (value) => {
        this.plugin.settings.isTitleRequired = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Use id").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.isIdRequired).onChange(async (value) => {
        this.plugin.settings.isIdRequired = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Use datetimeCreate").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.isDatetimeCreateRequired).onChange(async (value) => {
        this.plugin.settings.isDatetimeCreateRequired = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Use datetimeUpdate").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.isDatetimeUpdateRequired).onChange(async (value) => {
        this.plugin.settings.isDatetimeUpdateRequired = value;
        await this.plugin.saveSettings();
      })
    );
  }
};

// src/utils.ts
var import_obsidian2 = require("obsidian");
var notice = (message) => {
  return new import_obsidian2.Notice(`Auto Front Matter: ${message}`);
};

// main.ts
var nanoid = customAlphabet("1234567890abcdef", 10);
var DEFAULT_SETTINGS = {
  auto: false,
  isReorderRequired: false,
  isTitleRequired: false,
  isIdRequired: false,
  isDatetimeCreateRequired: false,
  isDatetimeUpdateRequired: false
};
var AutoFrontMatterPlugin = class extends import_obsidian3.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new AutoFrontMatterSettingTab(this.app, this));
    this.registerEvent(
      this.app.vault.on("modify", async (file) => {
        if (this.settings.auto) {
          if (file instanceof import_obsidian3.TFile) {
            this.updateFrontMatter(file);
          }
        }
      })
    );
    this.registerEvent(
      this.app.vault.on("rename", async (file) => {
        if (this.settings.auto) {
          if (file instanceof import_obsidian3.TFile) {
            this.updateFrontMatter(file);
          }
        }
      })
    );
    this.addCommand({
      id: "update-current-front-matter",
      name: "Update current front matter",
      editorCallback: (editor, ctx) => {
        if (ctx.file) {
          this.updateFrontMatter(ctx.file);
        }
      }
    });
  }
  onunload() {
  }
  async updateFrontMatter(file) {
    try {
      await this.app.fileManager.processFrontMatter(file, (frontMatter) => {
        if (this.settings.isTitleRequired) {
          frontMatter.title = file.basename;
        }
        if (this.settings.isIdRequired && isUndefined_default(frontMatter.id)) {
          frontMatter.id = nanoid();
        }
        if (this.settings.isDatetimeCreateRequired && isUndefined_default(frontMatter.datetimeCreate)) {
          frontMatter.datetimeCreate = (0, import_obsidian3.moment)(file.stat.ctime).format(
            "YYYY-MM-DD HH:mm:ss"
          );
        }
        if (this.settings.isDatetimeUpdateRequired) {
          frontMatter.datetimeUpdate = (0, import_obsidian3.moment)(file.stat.mtime).format(
            "YYYY-MM-DD HH:mm:ss"
          );
        }
        if (this.settings.isReorderRequired) {
          const oldFrontMatter = { ...frontMatter };
          delete frontMatter.title;
          delete frontMatter.id;
          delete frontMatter.datetimeCreate;
          delete frontMatter.datetimeUpdate;
          frontMatter.title = oldFrontMatter.title;
          frontMatter.id = oldFrontMatter.id;
          frontMatter.datetimeCreate = oldFrontMatter.datetimeCreate;
          frontMatter.datetimeUpdate = oldFrontMatter.datetimeUpdate;
        }
      });
    } catch (e) {
      notice("happened an error, please check your front matter");
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
