/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TagManyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/EnterTagsModal.ts
var import_obsidian = require("obsidian");
var EnterTagsModal = class extends import_obsidian.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "What tags do you want to add to the notes?" });
    new import_obsidian.Setting(contentEl).setName("Tags (separate with commas)").addText((text) => text.onChange((value) => {
      this.tags = value;
    }));
    new import_obsidian.Setting(contentEl).setName("Include subfolders?").addToggle((toggle) => toggle.onChange((value) => {
      this.includeSubfolders = value;
    }));
    new import_obsidian.Setting(contentEl).addButton((btn) => btn.setButtonText("Add tags").setCta().onClick(() => {
      this.close();
      this.onSubmit(this.tags, this.includeSubfolders);
    }));
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};

// src/main.ts
var TagManyPlugin = class extends import_obsidian2.Plugin {
  async onload() {
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, folder) => {
        if (!(folder instanceof import_obsidian2.TFolder))
          return;
        menu.addItem((item) => {
          item.setTitle("Tag all notes in this folder").setIcon("tags").onClick(async () => {
            new EnterTagsModal(this.app, async (tags, includeSubfolders) => {
              if (tags) {
                const tagArray = tags.split(",");
                await this.addTagsToNotes(tagArray, folder, includeSubfolders);
              }
            }).open();
          });
        });
      })
    );
  }
  onunload() {
  }
  async addTagsToNotes(tags, folder, includeSubfolders, counter = [0]) {
    for (const note of folder.children) {
      if (note instanceof import_obsidian2.TFolder) {
        if (includeSubfolders)
          await this.addTagsToNotes(tags, note, true, counter);
        continue;
      }
      this.app.fileManager.processFrontMatter(note, (frontmatter) => {
        if (!frontmatter.tags)
          frontmatter.tags = new Set(tags);
        else
          frontmatter.tags = [.../* @__PURE__ */ new Set([...frontmatter.tags, ...tags])];
      });
      counter[0]++;
    }
  }
};
